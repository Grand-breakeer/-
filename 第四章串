第一节串的基本定义
1.串即字符串是由零个或多个字符组成的有限系列。
2.子串：任意个连续的字符组成的子序列。
3.主串：包含子串的串。
4.字符在主串的位置：子符在串中的序号。
5.子串在主串的位置：子串首字符位置。
6.串是一种特殊的线性表，数据元素之间呈线性关系，串的数据对象限定为字符集。
7.串的基本操作：复值，复制，判空，求长度，清空，销毁，串联，求子串，定位，比较。
串的比较操作：通过ASCII字符码表比较。
第二节串的存储结构
1.顺序存储
#define MAXLEN 255
typedef struct{
char ch[MAXLEN];
int length;
}SString;
typedef struct{
char *ch;
int length;
}HString;
HString S;
S.ch=(char *)malloc(MAXLEN *sizeof(char));
S.length = 0;
2.串的链式存储（存储密度低，可以一个节点存储多个字符，提高存储密度）
3.基本操作的实现
求子串
bool SubString(SStrig &Sub,SString S,int pos,int len){
if(pos+len-1>S.length)
return false;
for (int i=pos;i<pos+len;i++)
Sub.ch[i-pos+1]=S.ch[i];
Sub.length=len;
return ture;
}
比较操作
int StrCompare(SString S,SString T){
for(int i=1;i<=S.length&&i<=T.length;i++){
if(S.ch[i]!=T.ch[i])
return S.ch[i]-T.ch[i];
}
return S.length-T.length;
}
定位操作
int Index(SString S,SString T){
int i=1,n=StrLength(S),m=StrLength(T);
SString sub;
while(i<=n-m+1)
SubString(sub,S,i,m);
if(StrCompare(sub,T)!=0)  ++i;
else return i;
}
return 0;
}
第三节字符串的朴素模式匹配算法
1.在主串中找到和模式串匹配的字符串，并返回其位置；
int Index(SString S,SString T){ 
int i=1,n=StrLength(S),m=StrLength(T);
SString sub;
while(i<=n-m+1)
SubString(sub,S,i,m);
if(StrCompare(sub,T)!=0)  ++i;
else return i;
}
return 0;
}
2.朴素模式匹配算法
算法思想
主串长度N，模式串长度M；
将主串所有长度为M的子串与模式串对比；
找到第一个与模式串匹配的子串，并返回子串的起始位置；
若所有子串都不匹配，则返回0；

int Index(SSing S,SString T){ 
int i=1,j=1;
while(i<S.length&&j<=T.length){
if(S.ch[i]==T.ch[j]){ 
++i;
++j;
}
else{
i=i-j+2;
j=1;
}
}
if(j>T.length)
renturn i-T.length;
else
return 0;
}
时间复杂度n*m；
第四节KMP算法
1.对于第一次朴素模式算法的匹配可以知道前若干个相同的信息，对于前若干个信息进行筛除，找到与模式串相同的部分，再往后进行匹配，循环往复，提高算法效率。
2.KMP算法只针对模式串，产生相应的指针变化。
3.设计next数组存储模式串指针对应的指向位置。
4.代码实现
int Index_KMP(SString S,SString T,int next[]){
int i=1,j=1;
while(i<S.length&&j<=T.length){
if(j==0||S.ch[i]==T.ch[j]){
++i;
++j;
}
else
j=next[j];
}
if(j>t.length)
return i-T.length;
else
return 0;
}
时间复杂度m+n.
第五节求next数组
1.对于任意模式串的next数组前两位都是0，1
2.其它位置：在不匹配的位置做分割线，依次向前迁移模式串找到匹配位置，此时指针指向第N位，next数组对应元素就是N；
第六节KMP算法的优化
1.next数组优化思路
nextval[1]=0;
for(int j=2;j<=T.length;j++){
if(T.ch[next[j]]==T.ch[j])
nextval[j]=nextval[next[j]];
else
nextval[j]=next[j];
}

