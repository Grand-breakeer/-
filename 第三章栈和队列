第一节栈的定义和基本操作
1.定义：栈是只允许在一端进行插入删除操作的线性表。
2.重要术语：栈顶，栈底，空栈。
3.栈的基本操作
初始化，销毁，进栈，出栈，读栈顶元素，判空栈是否为空。
4.栈的常考题型
n个不同的元素进栈，出栈元素排列为卡特兰数。
第二节顺序栈的实现
1.用顺序存储的方式实现栈
2.顺序栈的定义

#define MaxSize 10
typedef struct{
ElemType data[MaxSize];
int top;
}SqStaack;
//初始化
void InitStack(SqStack &5){
S.top=-1;
}
//判空
bool StackEmpty(Sqstack S){
if(S.top==-1)
return ture;
else
return false;
}
//新元素入栈
bool Push(SqStack &S,ElemType x){
if(S.top==MaxSize-1)
return false;
S.top=S.top+1;
S.data[S.top]=x;
return ture;
}
//出栈操作
bool Pop(SqStack &S,Elemtype &x){
if(S.top==-1)
return false;
x=S.data[S.top];
S.top=S.top-1;
return ture;
}
//读取栈顶元素
bool GetTop(SqStack S,ELemTy &x){
if(S.top==-1)
return flase;
x=S.data[S.top];
}
3.共享栈的定义与初始化
#define MaxSize 10
typedef struct{
ElemType data[MaxSize]
int top0;
int top1;
}ShStack;

//初始化栈
viod InitStack(ShStack &5){
S.top0=1;
S.top1=MaxSize;
}
第三节栈的链式存储
1.代码定义
typedef struct LinkNode{
ElemType data;
struct LinkNode *next;
}*LiStack;

第四节队列的定义和基本操作
1.只允许在一端进行操作另一端进行删除。
术语：队头，队尾，空队列。
队列特点先进先出FIFO
栈的特点：先进后出FILO
2.队列的基本操作：初始化，销毁，增加，删除，查询，判空。
第五节队列的顺序实现
1.用顺序存储实现队列
#define MaxSize 10;
typedef struct{
ElemTupe data[MaxSize];
int front,rear;
}SqQueue;
//初始化队列
void InitQueue(SqQueue &Q){
Q.rear=Q.front=0;
}
//入队操作
bool EnQueue(SqQueue &Q,Elemtype x){
if((Q.rear+1)%MaxSize==Q.front)
return false;
Q.data[Q.rear]=x;
Q.rear=(Q.rear+1)%MaxSize;//取模运算可以让数据呈环状分布
return ture;
}
//出队操作
bool DeQueue(SqQueue &Q,ElemType &x){
if(Q.rear==Q.front) 
return false;
x=Q.data[Q.front]
Q.front=(Q.front+1)%MaxSize；
return ture;
}
bool GetQueue(SqQueue &Q,ElemType %x){
if(Q.rear==Q.front)
return false;
x=Q.data[Q.front];
return ture;
}
//判断队满队空
1.可以设置size‘变量’表示队列中的元素个数
2.每次删除操作时令tag==0；每次插入操作是令tag==1；
队满条件front==size&tag==1，队空条件front==rear&&tag==0；
3.队列元素个数
（rear+MaxSize-front)%MaxSize;
第五节队列的链式存储
typedef struct LinkNode{
ElemType data;
Struct LinkNode *next;
}LinkNode;
typedef struct{
LinkNode *front ,*rear;
}LinkQueue;
//队列的初始化
void InitQueue(LinkQueue &Q){
Q.front=Q.reaar=(LinkQueue*)malloc(sizeof(LinkNode));//头结点
建立
Q.front->next=NULL；
}
//判空
bool IsEmpty(LinkQueue Q){
if(Q.front=Q.rear)
return ture;
else return false;
}
//入队
void EnQueue(LinkQueue &Q,ElemType x)
 LinkNode *s=(LinkNode *)malloc(sizeof(LinkNode);
s->data=x;s->next=NULL;
Q.rear->next=s;
Q.raer=s;
}
//出队
bool DeQueue(LinkQueue &Q,ElemType &x){
if(Q.front=Q.rear)  return false;
LinkNode *p=Q.front->next;
x=p->data;
Q.front->next=p->next;
if(Q.rear==p);
Q.rear=Q.front;
free(p);
}
第六节双端队列
1.判断输出序列的合法性
运用卡特兰数算出栈的合法出栈序列种类
输入输出受限的双端队列输出合法性的计算。
第七节栈的应用
1.括号匹配应用
（（（（））））最后出现的左括号最先被匹配，能够匹配弹出栈，不能匹配则匹配失败。
1.1代码实现
#define MaxSize 10
typedef struct{
char data[MaxSize];
int top;
}SqStack;
//初始化栈
void InitStack(SqStack &S)
//判断栈是否为空
bool StackEmpty(SqStack &S)
//新元素入栈
bool Push(SqStack S,char x)
//栈顶元素入栈
bool Pop(SqStack &S,char &x)
//括号匹配算法
bool bracketCheck(char str[],int length){
Sqstack S;
InitStack(S);//初始化一个栈
for(int i=0;i<length;i++){
if(str[i]=='('||str[i]=='['||str[i]=='{'){
Push(S,str[i]);//扫描到左括号入栈
}else{
if(StackEmpty(S))//扫描到右括号但是当前栈空
return false;
char topElem;
Pop(S,topElem)；//栈顶元素出栈
if(str[i]==')'&&topElem!='(')
return false;
if(str[i]==']'&&topElem!='[')
return false;
if(str[i]=='}'&&topElem!='{')
return false;
}
}
return StackEmpty(S);
}
2.表达式求值
1.中值表达式
a+b
a+b-c
a+b-c*d
由三个部分组成：操作数，运算符，界限符
2.后缀表达式（逆波兰表达式）
ab+
ab+c-
ab+cd*-
//中缀表达式转后缀表达式的方法
（1）确定各个运算符的运算顺序
（2）选定下一个运算符按照【左操作数 有操作数 运算符】的组合方式组合为一个新的操作数
（3）如果还有运算符没被处理，就继续（2）遵循左优先原则，所谓左优先原则就是从左往右可以先运算的运算符就先写入。
//中缀表达式转后缀表达式（机算）
初始化一个栈，保存还不能确定运算顺序的运算符。从左到右处理各个元素，直到末尾。可能遇到三种情况
（1）遇到操作数。直接加入后缀表达式
（2）遇到界限符。遇到“（”直接入栈；遇到“）”则依次弹出站内运算符并加入后缀表达式，直到弹出“（”为止。注意界限符不加入后缀表达式。
（3）遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到“（”或栈空则停止。之后再把当前运算符入栈。
按照上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。

3.前缀表达式（波兰表达式）//中缀表达式转前缀表达式
（2）按照【运算符  左操作数 右操作数】其余与上同
+ab
-+abc
－+ab*cd
//左右先原则，保持手算和计算相同，保证输出的确定性

4.中缀表达式的计算（计算）
用栈实现中缀表达式的计算：初始化两个栈，操作数栈；若扫描到操作数，压入操作数栈，若扫描到运算符或界限符，则按照“中缀转后缀”相同的逻辑压入运算符栈（期间也会弹出运算符，每当弹出一个运算符时，就需要再弹出两个操作数栈的栈顶元素并执行相应的运算，运算结果再压回操作数栈。





